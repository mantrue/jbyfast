package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"gin-blog/pkg/logging"
	_ "github.com/go-sql-driver/mysql"
	"github.com/jinzhu/gorm"
	"io/ioutil"
	"log"
	"os"
	"time"
)

var db *gorm.DB

func init() {
	var (
		err                                               error
		dbType, dbName, user, password, host, tablePrefix string
	)

	if err != nil {
		log.Fatal(2, "Fail to get section 'database': %v", err)
	}

	dbType = "mysql"
	dbName = "jingtongcloud"
	user = "root"
	password = "xxx"
	host = "115.28.78.221:3306"
	tablePrefix = ""

	db, err = gorm.Open(dbType, fmt.Sprintf("%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local",
		user,
		password,
		host,
		dbName))

	if err != nil {
		logging.Info("=======数据库连接失败=======")
		log.Println(err)
	}

	gorm.DefaultTableNameHandler = func(db *gorm.DB, defaultTableName string) string {
		return tablePrefix + defaultTableName
	}

	db.LogMode(false)
	db.SingularTable(true)

	db.DB().SetMaxIdleConns(10)
	db.DB().SetMaxOpenConns(100)
}

var num int

func main() {

	go func() {
		timer := time.NewTicker(time.Second * 1)
		for {
			<-timer.C
			num++
			fmt.Printf("=====当前执行时间:%d秒=====请等待程序执行完毕\n", num)
		}
	}()
	//获取分组的习题数量
	var gexlist []Gettic
	db.
		Table("exercises_textbook_tree_info_createexercise").
		Group("festival").
		Select("festival,count(exercises_createexercise_id) as counte").
		Scan(&gexlist)

	selectExCountMap := make(map[int]int)

	for _, obj := range gexlist {
		selectExCountMap[obj.Festival] = obj.Counte
	}

	//fmt.Println(selectExCountMap)

	//获取有习题的章节信息
	var exlist []Ettic
	db.
		Table("exercises_textbook_tree_info_createexercise").
		Order("version_id,course_id,textbook_tree_info_id,chapter,festival").
		Group("festival").
		Select("version_id,course_id,textbook_tree_info_id,chapter,festival").
		Scan(&exlist)
	isMaplist := make(map[string]int)

	for _, obj := range exlist {
		key := fmt.Sprintf("%d", obj.VersionId) + fmt.Sprintf("%d", obj.CourseId) + fmt.Sprintf("%d", obj.TextbookTreeInfoId) + fmt.Sprintf("%d", obj.Chapter) + fmt.Sprintf("%d", obj.Festival)
		isMaplist[key] = selectExCountMap[obj.Festival]
	}

	var bt []BizTextbook

	db.
		Table("biz_textbook").
		Joins("JOIN knowledge_point ON knowledge_point.textbook_id = biz_textbook.id AND knowledge_point.level = ?", 1).
		Order("biz_textbook.publishing_house_id,biz_textbook.course_id,biz_textbook.id,knowledge_point.id").
		Group("biz_textbook.publishing_house_id,biz_textbook.course_id,biz_textbook.id,knowledge_point.id").
		Select("biz_textbook.publishing_house_id as version_id,biz_textbook.course_id,biz_textbook.id as textbook_tree_info_id,knowledge_point.id as chapter").
		Scan(&bt)

	var data []BizTextbookData

	for _, v := range bt {
		var kpd []KnowledgePoint
		db.Where("parent_id = ?", v.Chapter).Find(&kpd)
		if len(kpd) > 0 {
			//bt[i].kp = kpd
			for _, cv := range kpd {
				key := fmt.Sprintf("%d", v.VersionId) + fmt.Sprintf("%d", v.CourseId) + fmt.Sprintf("%d", v.TextbookTreeInfoId) + fmt.Sprintf("%d", v.Chapter) + fmt.Sprintf("%d", cv.Id)
				count := isMaplist[key] //获取该章节下的习题数量
				//bt[i].kp[ci].ExCount = count
				data = append(data, BizTextbookData{v.VersionId, v.CourseId, v.TextbookTreeInfoId, v.Chapter, cv.Id, count})
			}
		} else {
			v.ExCount = 0
			data = append(data, BizTextbookData{v.VersionId, v.CourseId, v.TextbookTreeInfoId, v.Chapter, 0, 0})
		}
	}

	//获取版本
	//获取版本
	var btpc []BizTextbookPublishingContact
	db.Find(&btpc)
	btpcMapList := map[int]string{}
	for _, obj := range btpc {
		btpcMapList[obj.Id] = obj.PublishingHouse
	}
	//获取学科
	var ec []ExercisesCourse
	db.Find(&ec)
	ecMapList := map[int]string{}
	for _, obj := range ec {
		ecMapList[obj.Id] = obj.Name
	}
	//获取分册
	var abt []BizTextbook
	db.Find(&abt)
	abtMapList := map[int]string{}
	for _, obj := range abt {
		abtMapList[obj.Id] = obj.Name
	}

	//获取章节
	var kn []KnowledgePoint
	db.Find(&kn)
	knMapList := map[int]string{}
	for _, obj := range kn {
		knMapList[obj.Id] = obj.KnowledgeName
	}

	var jsonInfo []BizTextbookJsonData
	var csvInfo [][]string = [][]string{}

	for _, obj := range data {
		info := []string{btpcMapList[obj.VersionId], ecMapList[obj.CourseId], abtMapList[obj.TextbookTreeInfoId], knMapList[obj.Chapter], knMapList[obj.Festival], fmt.Sprintf("%d", obj.ExCount)}
		csvInfo = append(csvInfo, info)
		jsonInfo = append(jsonInfo, BizTextbookJsonData{btpcMapList[obj.VersionId], ecMapList[obj.CourseId], abtMapList[obj.TextbookTreeInfoId], knMapList[obj.Chapter], knMapList[obj.Festival], obj.ExCount})
	}

	s, err := json.Marshal(jsonInfo)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(s))
	ioutil.WriteFile("./error.json", s, os.ModeAppend)

	f, err := os.Create("tree.csv") //创建文件
	if err != nil {
		panic(err)
	}
	defer f.Close()
	f.WriteString("\xEF\xBB\xBF") // 写入UTF-8 BOM
	w := csv.NewWriter(f)
	w.WriteAll(csvInfo)
	w.Flush()
}

type BizTextbookJsonData struct {
	VersionName  string `json:"version_name"`
	CourseName   string `json:"course_name"`
	TextBookName string `json:"text_book_name"`
	ChapterName  string `json:"chapter_name"`
	FestivalName string `json:"festival_name"`
	ExCount      int    `json:"excount"`
}

type BizTextbookPublishingContact struct {
	Id              int    `json:"id"`
	PublishingHouse string `json:"name"`
}

type ExercisesCourse struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

//分组的数量
type Gettic struct {
	Counte   int `json:"counte"`
	Festival int `json:"festival"`
}

type Ettic struct {
	VersionId          int `json:"version_id"`
	CourseId           int `json:"course_id"`
	TextbookTreeInfoId int `json:"textbook_tree_info_id"`
	Chapter            int `json:"chapter"`
	Festival           int `json:"festival"`
	ExCount            int `json:"excount"`
}

type BizTextbookData struct {
	VersionId          int `json:"version_id"`
	CourseId           int `json:"course_id"`
	TextbookTreeInfoId int `json:"textbook_tree_info_id"`
	Chapter            int `json:"chapter"`
	Festival           int `json:"festival"`
	ExCount            int `json:"excount"`
}

type BizTextbook struct {
	VersionId          int              `json:"version_id"`
	CourseId           int              `json:"course_id"`
	TextbookTreeInfoId int              `json:"textbook_tree_info_id"`
	Chapter            int              `json:"chapter"`
	kp                 []KnowledgePoint `json:"festival"`
	ExCount            int              `json:"excount"`
	Id                 int              `json:"id"`
	Name               string           `json:"name"`
}

type KnowledgePoint struct {
	Id            int    `json:"festival"`
	ExCount       int    `json:"excount"`
	KnowledgeName string `json:"name"`
}
