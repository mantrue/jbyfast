package main

import (
	"encoding/csv"
	"fmt"
	"os"
	ph "path"
	"path/filepath"
	"strings"
	"time"
)

//扩展列表
var cutList = []string{"pdf", "docx", "doc", "pptx", "ppt", "rar", "zip"}
var dirName string

func main() {
	fmt.Println("请输入要执行的目录===例如:E:/goroot/zhongguo")
	fmt.Scan(&dirName)

	var start = time.Now()
	go func() {
		for {
			time.Sleep(time.Second)
			end := time.Now()
			second := end.Sub(start)
			fmt.Printf("当值执行程序耗时:%v\n", second)
		}
	}()

	maplist := map[string][]string{}
	mapcount := map[string]int{}

	filepath.Walk(dirName, func(path string, info os.FileInfo, err error) error {
		d, _ := filepath.Split(path)

		if info.IsDir() != true {
			saveName := ph.Ext(info.Name())

			maplist[d] = append(maplist[d], strings.TrimLeft(saveName, "."))
			mapcount[d]++

		}
		return nil
	})

	//time.Sleep(time.Second * 5)

	data := map[string]map[string]int{}

	var Max int

	for k, v := range maplist {
		m := getSliceStrCount(v)
		data[k] = m
		n := strings.Count(k, "\\")
		if n > Max {
			Max = n
		}
	}

	savedata := [][]string{}

	for dir, v := range data {
		sf := strings.Split(dir, "\\")

		n := len(sf)
		n = n - 1

		if n < Max {
			sli := make([]string, Max-n)

			for i := range sli {
				sli[i] = " "
			}
			sf = append(sf, sli...)
			sf = append(sf, "sum", fmt.Sprintf("%d", mapcount[dir]))
		} else {
			sf = append(sf, "sum", fmt.Sprintf("%d", mapcount[dir]))
		}

		if n > 0 {
			for _, cv := range cutList {
				sf = append(sf, cv, fmt.Sprintf("%d", v[cv]))
			}
		}
		savedata = append(savedata, sf)
	}

	f, err := os.Create("test.csv") //创建文件
	if err != nil {
		panic(err)
	}
	defer f.Close()

	f.WriteString("\xEF\xBB\xBF") // 写入UTF-8 BOM

	w := csv.NewWriter(f)

	w.WriteAll(savedata)
	w.Flush()

	fmt.Println("============程序执行完毕 3秒之后自动关闭============")
	time.Sleep(time.Second * 3)
}

func getSliceStrCount(arr []string) map[string]int {
	mapl := map[string]int{}
	for _, v := range arr {
		mapl[v]++
	}
	return mapl
}
