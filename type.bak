package main

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"
)

func main() {
	var FileName string
	fmt.Println("请输入类型文件地址 示例:E:/goroot/src/type.json")
	fmt.Scan(&FileName)

	if FileName == "" {
		fmt.Println("地址输入错误 程序即将退出")
		time.Sleep(time.Second * 3)
	}

	f, err := os.Open(FileName)
	if err != nil {
		fmt.Println(err)
		return
	}
	maplist := map[string]int{}
	err = json.NewDecoder(f).Decode(&maplist)
	if err != nil {
		fmt.Println("类型解析错误,不是正规的json文件")
		time.Sleep(time.Second * 3)
	}

	if len(maplist) <= 0 {
		fmt.Println("类型数据解析错误 程序即将退出")
		time.Sleep(time.Second * 3)
	}

	start := time.Now()

	go func() {
		for {
			end := time.Now()
			time.Sleep(time.Second)

			d := end.Sub(start)
			fmt.Printf("execute take up time %v\n", d)
		}
	}()

	editList := map[string]string{}

	filepath.Walk("C:/Users/hack/Desktop/web", func(path string, info os.FileInfo, err error) error {

		if info.IsDir() {
			d := filepath.Base(path)
			if _, ok := maplist[d]; ok {
				newpath := strings.Replace(path, d, strconv.Itoa(maplist[d])+"_"+d, -1)
				editList[path] = newpath

			}
		}
		return nil
	})

	if len(editList) > 0 {
		for k, v := range editList {
			err := os.Rename(k, v)
			if err != nil {
				fmt.Println(err)
				continue
			}
		}
	}

	fmt.Println("====程序执行完毕====")

	time.Sleep(time.Second * 3)
}
